"""""""""
# [90점] 난공불락


## 설명
완벽주의자인 문채운 장군은 자신의 성을 지켜야만 하는 상황에 놓여있습니다.
성을 완벽하게 지켜내기 위해 성벽에 감시병을 배치하기로 했습니다.
완벽주의적인 성격답게 성도 완전한 원형으로 생겼습니다.
감시병들은 각자 시력이 다르기 때문에 감시할 수 있는 거리가 다릅니다.
성 외곽 둘레를 완전히 감시망에 두고 있을때 성은 완벽히 감시되고 있다고 가정합니다.
감시병들은 항상 성벽에 배치됩니다. 성 내부에 배치되지 않습니다.
또,배치되는 위치가 주어지지 않기 때문에 최적의 위치에 배치할 수 있습니다.

함수의 이름은 castle이라고 하고, 
성의 반지름 Rc,감시병들의 관측할 수 있는 거리 {R1, R2, ... }가 주어질 때 성 외부를 완전히 감시할 수 있는지 판단하는 함수를 정의하세요.

midterm_7.py

허용 라이브러리: math

## 입력 설명
첫 번째 인자로 성벽의 반지름 값 하나가 Float으로 입력됩니다.
두 번째 인자로 감시병들의 관측 거리가 Float 리스트로 입력됩니다.

## 출력 설명
성 외곽이 완벽히 감시되고 있다면 True, 아니라면 False를 반환해야 합니다.


### 입력 예시 1 
5.0
[5.0, 5.0, 5.0]

### 출력 예시 1
True


### 입력 예시 2 
5.0
[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]

### 출력 예시 2
True


### 입력 예시 3 
101.0
[10.0, 20.0, 15.0, 5.0, 1.0, 60.0, 100.0, 11.0, 14.0, 12.0, 15.0]

### 출력 예시 3
False


### 입력 예시 4 
0.1
[0.11,0.01,0.05,0.12,0.01]

### 출력 예시 4
True


## 힌트
math 라이브러리를 이용하면 삼각함수 또는 역삼각함수를 사용할 수 있다
역삼각함수는 삼각함수로 계산한 값을 다시 각도로 되돌릴 때 사용한다.

image.png

"""""""""

import math


def castle(center_r: float, r_list: list[float]) -> bool:
    PI = math.pi
    center_dul = 2 * PI * center_r
    dis = []

    if [i for i in r_list if i >= center_r]:
        return True

    for i in r_list:
        q = math.atan2(center_r, i/2)
        o = 2 * (PI/2 - q)
        dis.append(center_r * o)

    dis_double = dis*2
    return center_dul <= sum(dis_double)


a = 0.1
b = [0.11,0.01,0.05,0.12,0.01]
print(castle(a, b))
